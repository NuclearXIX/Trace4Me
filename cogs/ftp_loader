import ftplib
import re
from datetime import datetime, timezone

def fetch_ftp_logs(gid: int | None) -> list[str]:
    from utils.ftp_config import FTP_HOST, FTP_USER, FTP_PASS, FTP_PATH

    lines: list[str] = []
    try:
        ftp = ftplib.FTP(FTP_HOST)
        ftp.login(FTP_USER, FTP_PASS)
        ftp.cwd(FTP_PATH)

        files = ftp.nlst()
        log_files = [f for f in files if f.lower().endswith(('.rpt', '.log'))]

        for f in log_files:
            bio = []
            ftp.retrlines(f"RETR {f}", bio.append)
            lines.extend(bio)

        ftp.quit()
    except Exception as e:
        print(f"[FTP] Failed: {e}")
    return lines


def build_track_from_logs(lines: list[str], gamertag: str) -> dict:
    POS_RE = re.compile(
        r'pos\s*=\s*<\s*(?P<x>-?\d+(?:\.\d+)?)\s*,\s*(?P<y>-?\d+(?:\.\d+)?)\s*,\s*(?P<z>-?\d+(?:\.\d+)?)\s*>',
        re.I
    )
    TAG_RE = re.compile(re.escape(gamertag), re.I)
    TIME_RE = re.compile(r'(\d{2}:\d{2}:\d{2})')

    points: list[dict] = []

    for line in lines:
        if not TAG_RE.search(line):
            continue

        pos_match = POS_RE.search(line)
        if not pos_match:
            continue

        ts = None
        tmatch = TIME_RE.search(line)
        if tmatch:
            try:
                hh, mm, ss = map(int, tmatch.group(1).split(":"))
                ts = datetime.now(timezone.utc).replace(hour=hh, minute=mm, second=ss, microsecond=0)
            except Exception:
                ts = datetime.now(timezone.utc)

        try:
            x = float(pos_match.group("x"))
            z = float(pos_match.group("z"))
        except Exception:
            continue

        points.append({"ts": ts.isoformat() if ts else None, "x": x, "z": z})

    points.sort(key=lambda p: p["ts"] or "")

    return {"gamertag": gamertag, "points": points}
